import numpy as np

def inverse_kinematics(x, y, l1, l2):
    """
    Calculate inverse kinematics for a 2-DOF robotic arm
    :param x: x-coordinate of the end effector
    :param y: y-coordinate of the end effector
    :param l1: length of the first arm
    :param l2: length of the second arm
    :return: angles for the two joints (in radians)
    """
    # Calculate theta2
    D = (x**2 + y**2 - l1**2 - l2**2) / (2 * l1 * l2)
    theta2 = np.arccos(D)

    # Calculate theta1
    A = l1 + l2 * np.cos(theta2)
    B = l2 * np.sin(theta2)
    theta1 = np.arctan2(y, x) - np.arctan2(B, A)

    return theta1, theta2

# Simulated server data
def get_coordinates_from_server():
    # This function should fetch x, y coordinates from the server
    # For now, let's use random values for demonstration
    x = np.random.uniform(-5, 5)
    y = np.random.uniform(-5, 5)
    return x, y

# Example usage
l1 = 3
l2 = 2

# Get coordinates from the server
x, y = get_coordinates_from_server()

# Calculate joint angles
theta1, theta2 = inverse_kinematics(x, y, l1, l2)

# Print results
print("Coordinates (x, y):", x, y)
print("Joint angles (theta1, theta2):", np.degrees(theta1), np.degrees(theta2))
